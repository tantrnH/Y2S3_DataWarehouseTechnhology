CREATE TABLE CUSTOMER_DIM
(
CUSTOMER_KEY NUMBER       NOT NULL,
CUSTOMERID   NUMBER       NOT NULL,
COMPANYNAME  VARCHAR2(25) NOT NULL,
COUNTRY      VARCHAR2(15) NOT NULL,
REGION       VARCHAR2(15) NOT NULL,
CITY         VARCHAR2(15) NOT NULL,
POSTALCODE   VARCHAR2(10) NOT NULL,
CONSTRAINT CUSTOMER_DIM_PK PRIMARY KEY(CUSTOMER_KEY),
CONSTRAINT CUSTOMER_DIM_FK FOREIGN KEY(CUSTOMERID) REFERENCES NEW_CUST(CUSTOMERID)
);

CREATE SEQUENCE CUSTOMER_DIM_SEQ
   START WITH 1234
   INCREMENT BY 1;

-- ETL (EXTRACT, TRANSFORM, LOAD)

-- EXTRACT
SELECT 
    CUSTOMERID,
    COMPANYNAME,
    COUNTRY,
    REGION,
    CITY,
    POSTALCODE
FROM NEW_CUST;

-- TRANSFORM (MODIFY, EDIT, DATA STANDARDISE)
SELECT 
    CUSTOMERID,
    UPPER(COMPANYNAME),
    UPPER(COUNTRY),
    UPPER(REGION),
    UPPER(CITY),
    UPPER(POSTALCODE)
FROM NEW_CUST;

-- LOAD
INSERT INTO CUSTOMER_DIM
SELECT 
    CUSTOMER_DIM_SEQ.NEXTVAL,
    CUSTOMERID,
    UPPER(COMPANYNAME),
    UPPER(COUNTRY),
    UPPER(REGION),
    UPPER(CITY),
    UPPER(POSTALCODE)
FROM NEW_CUST;

ERROR MESSAGE
ORA-01400: cannot insert NULL into ("RDS2S3G4_130"."CUSTOMER_DIM"."REGION")


SELECT CUSTOMERID
FROM NEW_CUST
WHERE REGION IS NULL;

-- CLEAN DATA
UPDATE NEW_CUST
SET REGION = CITY
WHERE REGION IS NULL;

UPDATE NEW_CUST
SET POSTALCODE = '53300'
WHERE POSTALCODE IS NULL;

-- CREATE EMPLOYEE_DIM
CREATE TABLE EMPLOYEE_DIM
(
EMPLOYEE_KEY  NUMBER       NOT NULL,
EMPLOYEEID    NUMBER       NOT NULL,
EMP_NAME      VARCHAR2(35) NOT NULL,
HIREDATE      DATE         NOT NULL,
COUNTRY       VARCHAR2(15) NOT NULL,
CITY          VARCHAR2(15) NOT NULL,
CONSTRAINT EMPLOYEE_DIM_PK PRIMARY KEY (EMPLOYEE_KEY),
CONSTRAINT EMPLOYEE_DIM_FK FOREIGN KEY (EMPLOYEEID) REFERENCES EMPLOYEES(EMPLOYEEID)
);

-- CREATE SEQUENCE
CREATE SEQUENCE EMP_DIM_SEQ
   START WITH 1234
   INCREMENT BY 1;

INSERT INTO EMPLOYEE_DIM
SELECT EMP_DIM_SEQ.NEXTVAL,
       EMPLOYEEID,
       FIRSTNAME ||' '||LASTNAME,
       HIREDATE,
       COUNTRY,
       CITY
FROM EMPLOYEES;

-- CREATE PRODUCT_DIM

CREATE SEQUENCE PRODUCT_DIM_SEQ
   START WITH 1234
   INCREMENT BY 1;
   
CREATE TABLE PRODUCT_DIM
(
PRODUCT_KEY     NUMBER       NOT NULL,
PRODUCTID       NUMBER       NOT NULL,
PRODUCTNAME     VARCHAR2(40) NOT NULL,
QUANTITYPERUNIT VARCHAR2(20) NOT NULL,
DISCONTINUED   NUMBER(1)    NOT NULL,
CATEGORYNAME    VARCHAR2(15) NOT NULL,
SUP_COMPANYNAME VARCHAR2(40) NOT NULL,
SUP_COUNTRY     VARCHAR2(15) NOT NULL,
SUP_CITY        VARCHAR2(15) NOT NULL,
CONSTRAINT PRODUCT_DIM_PK PRIMARY KEY (PRODUCT_KEY),
CONSTRAINT PRODUCT_DIM_FK FOREIGN KEY (PRODUCTID) REFERENCES PRODUCTS(PRODUCTID)
);
-- ETL
--EXTRACT
SELECT 
  P.PRODUCTID,
  P.PRODUCTNAME,
  P.QUANTITYPERUNIT,
  C.CATEGORYNAME,
  S.COMPANYNAME,
  S.COUNTRY,
  S.CITY
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORYID = C.CATEGORYID
JOIN SUPPLIERS S ON P.SUPPLIERID = S.SUPPLIERID;

-- TRANSFORM
SELECT 
  P.PRODUCTID,
  UPPER(P.PRODUCTNAME),
  UPPER(P.QUANTITYPERUNIT),
  P.DISCONTINUED,
  UPPER(C.CATEGORYNAME),
  UPPER(S.COMPANYNAME),
  UPPER(S.COUNTRY),
  UPPER(S.CITY)
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORYID = C.CATEGORYID
JOIN SUPPLIERS S ON P.SUPPLIERID = S.SUPPLIERID;

-- LOAD
INSERT INTO PRODUCT_DIM
SELECT
  PRODUCT_DIM_SEQ.NEXTVAL,
  P.PRODUCTID,
  UPPER(P.PRODUCTNAME),
  UPPER(P.QUANTITYPERUNIT),
  P.DISCONTINUED,
  UPPER(C.CATEGORYNAME),
  UPPER(S.COMPANYNAME),
  UPPER(S.COUNTRY),
  UPPER(S.CITY)
FROM PRODUCTS P
JOIN CATEGORIES C ON P.CATEGORYID = C.CATEGORYID
JOIN SUPPLIERS S ON P.SUPPLIERID = S.SUPPLIERID;






-- CREATE SALES_FACT
CREATE TABLE SALES_FACT
(
DATE_KEY      NUMBER      NOT NULL,
CUSTOMER_KEY  NUMBER      NOT NULL,
PRODUCT_KEY   NUMBER      NOT NULL,
EMPLOYEE_KEY  NUMBER      NOT NULL,
ORDERID       NUMBER      NOT NULL,
UNITPRICE     NUMBER(6,2) NOT NULL,
QUANTITY      NUMBER(3)   NOT NULL,
DISCOUNT      NUMBER(3,2) NOT NULL,
LINE_TOTAL    NUMBER(8,2) NOT NULL,
CONSTRAINT SF_PK PRIMARY KEY(DATE_KEY, CUSTOMER_KEY, PRODUCT_KEY, EMPLOYEE_KEY, ORDERID),
CONSTRAINT SF_DATE_FK FOREIGN KEY(DATE_KEY) REFERENCES DATE_DIM(DATE_KEY),
CONSTRAINT SF_CUSTOMER_FK FOREIGN KEY(CUSTOMER_KEY) REFERENCES CUSTOMER_DIM(CUSTOMER_KEY),
CONSTRAINT SF_PRODUCT_FK FOREIGN KEY(PRODUCT_KEY) REFERENCES PRODUCT_DIM(PRODUCT_KEY),
CONSTRAINT SF_EMPLOYEE_FK FOREIGN KEY(EMPLOYEE_KEY) REFERENCES EMPLOYEE_DIM(EMPLOYEE_KEY),
CONSTRAINT SF_ORDERS_FK FOREIGN KEY(ORDERID) REFERENCES NEW_ORDERS(ORDERID)
);

-- ETL
-- EXTRACT
SELECT
   C.DATE_KEY,
   D.CUSTOMER_KEY,
   E.PRODUCT_KEY,
   F.EMPLOYEE_KEY,
   A.ORDERID,
   B.UNITPRICE,
   B.QUANTITY,
   B.DISCOUNT,
   (B.UNITPRICE * B.QUANTITY) * (1 - B.DISCOUNT)
FROM NEW_ORDERS A
JOIN NEW_DETAILS B ON A.ORDERID = B.ORDERID
JOIN DATE_DIM C ON C.CAL_DATE = A.ORDERDATE
JOIN CUSTOMER_DIM D ON A.CUSTOMERID = D.CUSTOMERID
JOIN PRODUCT_DIM E ON B.PRODUCTID = E.PRODUCTID
JOIN EMPLOYEE_DIM F ON A.EMPLOYEEID = F.EMPLOYEEID;

-- LOAD
INSERT INTO SALES_FACT
SELECT
   C.DATE_KEY,
   D.CUSTOMER_KEY,
   E.PRODUCT_KEY,
   F.EMPLOYEE_KEY,
   A.ORDERID,
   B.UNITPRICE,
   B.QUANTITY,
   B.DISCOUNT,
   (B.UNITPRICE * B.QUANTITY) * (1 - B.DISCOUNT)
FROM NEW_ORDERS A
JOIN NEW_DETAILS B ON A.ORDERID = B.ORDERID
JOIN DATE_DIM C ON C.CAL_DATE = A.ORDERDATE
JOIN CUSTOMER_DIM D ON A.CUSTOMERID = D.CUSTOMERID
JOIN PRODUCT_DIM E ON B.PRODUCTID = E.PRODUCTID
JOIN EMPLOYEE_DIM F ON A.EMPLOYEEID = F.EMPLOYEEID;



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
QUESTION: 3 DIMENSIONAL: WHEN, WHO, WHAT

DISPLAY LINETOTAL SPENDS BY THE CUSTOMERS IN YEAR 2022 - 2024 IN THE 'BRAZIL','ITALY' AND 'DENMARK' WITH THE  PRODUCT CATEGORY NAME 'MEAT','PRODUCE', 'SEAFOOD'

When : year 2022-2024
Who  : customers
What : total spends, product category
Where: 'BRAZIL', 'ITALY' AND 'DENMARK'
Why  : to capture the total sales of customers in brazil, italy and DENMARK

QUERY:
-- LOAD DATA
FROM SALES_FACT SALES_FACT
JOIN DATA_DIM D ON SF.DATE_KEY = D.DATE_KEY 
JOIN CUSTOMER_DIM C ON SF.CUSTOMER_KEY = C.CUSTOMER_KEY 
JOIN PRODUCT_DIM P ON SF.PRODFUCT_KEY = P.PRODUCT_KEY  

-- FILTER
WHERE (D.CAL_YEAR BETWEEN 2022 AND 20224) AND
      (C.COUNTRY IN ('BRAZIL','ITALY','DENMARK')) AND
      (P.CATEGORYNAME IN ('MEAT/POULTRY','PRODUCE','SEAFOOD')) 

-- AGGREGATE
GROUP BY C.COUNTRY,
         D.CAL_YEAR,
         P.CATEGORYNAME

-- SELECT COLUMN
SELECT C.COUNTRY,
       D.CAL_YEAR,
       P.CATEGORYNAME,
       SUM(SF.LINE_TOTAL) TOTAL_SALES

-- SORTING
ORDER BY C.COUNTRY,
         D.CAL_YEAR,
         P.CATEGORYNAME\

====================================
SELECT C.COUNTRY,
       D.CAL_YEAR,
       P.CATEGORYNAME,
       SUM(SF.LINE_TOTAL) TOTAL_SALES
FROM SALES_FACT SF 
JOIN DATE_DIM D ON SF.DATE_KEY = D.DATE_KEY 
JOIN CUSTOMER_DIM C ON SF.CUSTOMER_KEY = C.CUSTOMER_KEY 
JOIN PRODUCT_DIM P ON SF.PRODUCT_KEY = P.PRODUCT_KEY  
WHERE (D.CAL_YEAR BETWEEN 2022 AND 20224) AND
      (C.COUNTRY IN ('BRAZIL','ITALY','DENMARK')) AND
      (P.CATEGORYNAME IN ('MEAT/POULTRY','PRODUCE','SEAFOOD')) 
GROUP BY C.COUNTRY,
         D.CAL_YEAR,
         P.CATEGORYNAME
ORDER BY C.COUNTRY,
         D.CAL_YEAR,
         P.CATEGORYNAME;
=====================================

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MIDTERM REVISION
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
